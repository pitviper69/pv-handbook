---
import { ModeToggle } from "@/components/core/ModeToggle";
import HamNavMenu from "@/components/core/HamNavMenu.astro";
import NavMenu from "@/components/core/NavMenu.astro";
import { Search } from "@/components/core/Search";
import { Button } from "@/components/ui/button";
import { docconfig, SITE } from "@/config";
import { Github } from "lucide-react";

import { SignOut } from 'auth-astro/components'

import { getSession } from 'auth-astro/server';
const session = await getSession(Astro.request);

---

<header class="navbar sticky top-0 z-50 border-b bg-base-300">
    <div class="navbar-start">
        {
          session && (
            <>
              <HamNavMenu />
              <div class="hidden md:block">
                <NavMenu />
              </div>
            </>
          )
        }
    </div>
    <div class="navbar-center">
      <a href="/" class="btn btn-ghost">
          <Button
              client:load
              className="flex gap-2 hover:no-underline text-2xl"
              variant="link"
          >
              <img src="/Fangs-Logo-HD.webp" alt="" class="w-[4rem] h-[2rem]" />
          </Button>
      </a>
    </div>

    <div class="navbar-end">
      {
        session && (
            <>
              {!docconfig.hide_search && <Search client:only="react" />}
              <div class="flex-row gap-8 flex">
                <!--<ModeToggle client:only transition:persist />-->
              </div>
              <div class="flex-row gap-8 hidden md:flex self-center">
                Hi {session.user?.name}
              </div>
              <SignOut class="text-primary rounded-lg px-2">
                  Sign Out
              </SignOut>
            </>
        )
      }
    </div>
</header>

<script is:inline>
  function setDarkMode(document) {
    const getThemePreference = () => {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "pvLight";
    };
    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
          const theme = document.documentElement.getAttribute('data-theme');
          const savedTheme = localStorage.getItem("theme");
          if (theme !== savedTheme) {
              document.documentElement.setAttribute('data-theme', savedTheme);
          }
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["data-theme"],
      });
    }
  }

  setDarkMode(document);

  document.addEventListener("astro:before-swap", (ev) => {
    // Pass the incoming document to set the theme on it
    setDarkMode(ev.newDocument);
  });
</script>
